#+TITLE: nix-config
Configuration for NixOS and user home (dot files). It is provided via Nix flakes and
includes the following components:

- devShell :: a shell with tools used for development
- lib :: library functions to be used with flakes or within Nix.
  - kebabCaseToCamelCase :: convert kebab case to camel case (hello-world -> helloWorld)
  - importDirToAttrs :: given a directory import all files into a set corresponding to
    each file name.
  - nixosSystemFor :: a helper function to build configuration for target host, this can
    be an input for another flake where you can extend the host configuration (e.g. I use
    it for my private configuration additions).
- homeManagerModules :: modules that can be used together with [[https://github.com/rycee/home-manager][home-manager]].
  - defaultBrowser :: configure a default browser.
- nixosConfigurations :: host configurations for [[https://github.com/NixOS/nixpkgs][NixOS]].
- nixosModules :: modules that can be used together with [[https://github.com/NixOS/nixpkgs][NixOS]].
  - dictionaries :: configure dictionaries (both aspell and hunspell) via one setting.
  - keyboard :: configure keyboard for console, kmscon and xserver via one setting.
  - kmonad :: service for [[https://github.com/david-janssen/kmonad][kmonad]].
  - shell :: configure shell environment.
- overlay :: a package overlay including the mentioned packages.
- overlays :: custom overlays.
  - iosevka :: iosevka configured with the slab set.
  - menu :: pulling my custom package [[https://github.com/terlar/menu][menu]].
  - python-packages :: adding python packages not avilable in nixpkgs.
- packages :: packages not in the default nixpkgs.
  - [[https://github.com/david-janssen/kmonad][kmonad-bin]]
  - [[https://github.com/ruby-formatter/rufo][rufo]]
  - [[https://github.com/TylerBrock/saw][saw]]

* Usage
Show what is provided:
#+BEGIN_SRC sh
nix flake show
#+END_SRC

Switch both system (NixOS) and home:
#+BEGIN_SRC sh
nix dev-shell -c switch-nixos
#+end_src

Switch home only:
#+BEGIN_SRC sh
nix dev-shell -c switch-home
#+end_src

Update all inputs:
#+BEGIN_SRC sh
nix flake update --recreate-lock-file --commit-lock-file
#+end_src

Update a single input:
#+BEGIN_SRC sh
nix flake update --update-input nixpkgs --commit-lock-file
#+end_src

* Development
Use a local input during development:
#+begin_src sh
nix flake update --override-input nixpkgs path:../nixpkgs
#+end_src

* Non-NixOS
** Default shell
If you use a custom shell, you need to manually set the default shell, this is done by:
#+BEGIN_SRC sh
echo $HOME/.nix-profile/bin/fish | sudo tee -a /etc/shells
chsh -s $HOME/.nix-profile/bin/fish
#+END_SRC

* Tasks
** TODO Extract some inline stuff into external files
** TODO GC helpers?
** TODO Home manager config for qutebrowser + dicts
** TODO Look into if more PA config is needed:
- [[https://github.com/dejanr/dotfiles/blob/ef9c27cf93a17e0af4bdf5cc378d2808b5326afa/nix/config/nixpkgs/roles/multimedia.nix#L35][Sample]]
** TODO Nest/group modules
** TODO Script to regenerate hardware-config for current host
