#+TITLE: nix-config
Configuration for NixOS and user home (dot files).

* Setup
Prepare your private data, by configuring the search path =<private/data>=.  The format is
specified in [[file:load-data.nix]].

You can also optionally provide extra private configuration for nixos and home-manager by
providing =<private/nixos>= and =<private/home>= respectively.

* Usage
Switch both system (NixOS) and home:
#+BEGIN_SRC sh
nix-shell --run switch-nixos
#+end_src

Switch home only:
#+BEGIN_SRC sh
nix-shell --run switch-home
#+end_src

Update the upstream sources:
#+BEGIN_SRC sh
nix-shell --run update-all-sources

nix-shell --run update-dotfile-sources
nix-shell --run update-emacs-sources
nix-shell --run update-nix-sources
#+end_src

* Development
The available search paths and their defaults are:
- =nixpkgs= :: =./external/nixpkgs=
- =overlays= :: =./overlays=
- =nixos-config= :: =./hosts/{hostname}/configuration.nix=
- =dotfiles= :: =./external/dotfiles=
- =emacs-config= :: =./external/emacs.d=
- =home-manager= :: =./external/home-manager=
- =home-manager-config= :: =./config/home.nix=
- =private= :: =../nix-config-private=

Run with local version of search paths:
#+begin_src sh
nix-shell --argstr dotfiles ../dotfiles
#+end_src

* Tasks
** TODO Extract some inline stuff into external files
** TODO Compile elisp files
#+begin_src nix
emacsConfig =
  configFile."emacs-config".source = let
    emacsBatch = "${pkgs.emacs}/bin/emacs -batch -q -no-site-file"
  in pkgs.runCommand "init.EC" {} ''
    cp ${<emacs-config/init.org>} init.org
    ${emacsBatch} ./init.org -f org-babel-tangle
    ${emacsBatch} -f batch-byte-compile ./init.el
    mv init.el* $out
  '';
#+end_src
** TODO Ability to pin nixpkgs? as alternative to the submodule
** TODO GC helpers?
** TODO Home manager config for qutebrowser + dicts
